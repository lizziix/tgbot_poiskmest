import telebot
from telebot import types
from telebot.types import ReplyKeyboardRemove
import sqlite3
import requests
from selenium import webdriver
from bs4 import BeautifulSoup
import time


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–µ–æ–∫–æ–¥–µ—Ä–æ–º –Ø–Ω–¥–µ–∫—Å–∞
class YandexGeocoder:
    def __init__(self, yandex_token):
        self.YANDEX_API_KEY = yandex_token

    def get_geocode(self, addr):
        URL = f"https://geocode-maps.yandex.ru/1.x/?apikey={self.YANDEX_API_KEY}&geocode={addr}&format=json&results=1&lang=ru_RU"
        result = requests.get(URL).json()
        try:
            return result['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['Point']['pos']
        except:
            return -1

    def form_href_to_yamap(self, long, wide):
        return f"http://maps.yandex.ru/?ll={long},{wide}&spn=0.067205,0.018782&z=15&l=map,stv&text={wide}%20{long}"


def get_search_url(metro_station, place):
    return f"https://yandex.ru/maps/?text={metro_station} {place}, –ú–æ—Å–∫–≤–∞"


def get_place_rating_and_timework(url):
    driver = webdriver.Chrome()
    driver.get(url)
    time.sleep(2)
    soup = BeautifulSoup(driver.page_source, 'html.parser')
    driver.quit()

    try:
        rating = soup.find('span', {'class': 'business-rating-badge-view__rating-text'}).text
    except AttributeError:
        rating = "–†–µ–π—Ç–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

    try:
        timework = soup.find('div', {'class': 'business-working-status-view'}).text
    except AttributeError:
        timework = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    return rating, timework


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = telebot.TeleBot('')

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≥–µ–æ–∫–æ–¥–µ—Ä–∞
geocoder = YandexGeocoder('')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
def get_places(metro_station, place_type):
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–¥
    conn = sqlite3.connect('places.db')
    cursor = conn.cursor()
    cursor.execute("SELECT place, description, address FROM places WHERE metro = ? AND type = ?",
                   (metro_station, place_type))
    places = cursor.fetchall()

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã
    places_with_links = []

    for place, description, address in places:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π URL –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö
        search_url = get_search_url(metro_station, place)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞
        rating, timework = get_place_rating_and_timework(search_url)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã
        coordinates = geocoder.get_geocode(f"{address}, –ú–æ—Å–∫–≤–∞")
        if coordinates != -1:
            map_link = geocoder.form_href_to_yamap(*coordinates.split())
            places_with_links.append((place, description, address, map_link, rating, timework))
        else:
            places_with_links.append((place, description, address, "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", rating, timework))

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

    return places_with_links


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤ –º–µ—Å—Ç
def get_place_types():
    conn = sqlite3.connect('places.db')
    cursor = conn.cursor()
    cursor.execute("SELECT type FROM places")
    types = cursor.fetchall()
    conn.close()
    return list({type[0] for type in types})


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã! –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
@bot.message_handler(func=lambda message: message.text in get_place_types())
def send_places(message):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ
    place_type = message.text.strip()
    places = get_places(metro_station, place_type)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç
    if places:
        response = f"{place_type} –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ {metro_station}:\n\n"
        for place, description, address, map_link, rating, timework in places:
            response += f"üìç _{place}_\n{description}\n\n{address}\n\n–†–µ–π—Ç–∏–Ω–≥: {rating}\n\n–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {timework}\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã: {map_link}\n\n"
        bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@bot.message_handler(func=lambda message: message.text == '–û—Ç–º–µ–Ω–∞')
def cancel(message):
    bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ)
@bot.message_handler(func=lambda message: True)
def get_place_type(message):
    global metro_station
    metro_station = message.text.strip().capitalize()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(place_type) for place_type in get_place_types()])
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –º–µ—Å—Ç–∞:", reply_markup=keyboard)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
